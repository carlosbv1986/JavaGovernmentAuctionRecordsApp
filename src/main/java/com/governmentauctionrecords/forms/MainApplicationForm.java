/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.governmentauctionrecords.forms;

import java.awt.Toolkit;
import java.awt.event.MouseEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.print.PrinterException;
import java.io.File;
import java.text.SimpleDateFormat;
import java.util.Locale;
import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import com.governmentauctionrecords.daos.AuctionDAO;
import com.governmentauctionrecords.models.Auction;
import com.governmentauctionrecords.utils.AuctionRecordPrinter;
import java.awt.print.PrinterJob;
import java.math.BigDecimal;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.text.NumberFormat;
import java.util.Date;
import javax.swing.JTextArea;
import javax.swing.text.DateFormatter;
import javax.swing.text.DefaultFormatterFactory;

/**
 *
 * @author carlo
 */
public class MainApplicationForm extends javax.swing.JFrame {

    private int currentRecordId = 0;
    private Timestamp currentRecordCreatedAtTimestamp = null;

    /**
     * Creates new form MainApplicationForm
     */
    public MainApplicationForm() {

        initComponents();

        setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                promptQuit(MainApplicationForm.this);
            }
        });

        // Load initial (latest) record on startup
        loadRecord(null, null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenuForEditorPane = new javax.swing.JPopupMenu();
        jMenuItemCopy = new javax.swing.JMenuItem();
        jMenuItemSelectAll = new javax.swing.JMenuItem();
        jMenuItemPrint = new javax.swing.JMenuItem();
        jPanelBidRecordListHeader = new javax.swing.JPanel();
        jLabelBidRecordsListHeaderBidderName = new javax.swing.JLabel();
        jLabelBidRecordsListHeaderBidAmount = new javax.swing.JLabel();
        jLabelBidRecordsListHeaderBidTime = new javax.swing.JLabel();
        buttonGroupLookAndFeelOptions = new javax.swing.ButtonGroup();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jTextFieldAuctionTitle = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextAreaAuctionDescription = new javax.swing.JTextArea();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jTextFieldAuctionWinningBidAmount = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jTextFieldAuctionWinningBiderName = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jFormattedTextFieldAuctionDate = new javax.swing.JFormattedTextField();
        jFormattedTextFieldCreatedAt = new javax.swing.JFormattedTextField();
        jPanel3 = new javax.swing.JPanel();
        jScrollPaneBidRecords = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jEditorPaneHelpContents = new javax.swing.JEditorPane();
        jPanel5 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jRadioButtonMetalLaf = new javax.swing.JRadioButton();
        jRadioButtonWindowsClassicLaf = new javax.swing.JRadioButton();
        jButtonEditRecord = new javax.swing.JButton();
        jButtonDeleteRecord = new javax.swing.JButton();
        jButtonAddRecord = new javax.swing.JButton();
        jButtonPreviousRecord = new javax.swing.JButton();
        jButtonNextRecord = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jCheckBoxIncludebidRecords = new javax.swing.JCheckBox();
        jButtonPrintRecord = new javax.swing.JButton();
        jButtonExit = new javax.swing.JButton();

        jMenuItemCopy.setText("Copy");
        jMenuItemCopy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemCopyActionPerformed(evt);
            }
        });
        jPopupMenuForEditorPane.add(jMenuItemCopy);

        jMenuItemSelectAll.setText("Select All");
        jMenuItemSelectAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSelectAllActionPerformed(evt);
            }
        });
        jPopupMenuForEditorPane.add(jMenuItemSelectAll);

        jMenuItemPrint.setText("Print");
        jMenuItemPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemPrintActionPerformed(evt);
            }
        });
        jPopupMenuForEditorPane.add(jMenuItemPrint);

        jPanelBidRecordListHeader.setLayout(new java.awt.GridLayout(1, 3));

        jLabelBidRecordsListHeaderBidderName.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelBidRecordsListHeaderBidderName.setText("Bidder Name");
        jLabelBidRecordsListHeaderBidderName.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanelBidRecordListHeader.add(jLabelBidRecordsListHeaderBidderName);

        jLabelBidRecordsListHeaderBidAmount.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelBidRecordsListHeaderBidAmount.setText("Bid Amount");
        jLabelBidRecordsListHeaderBidAmount.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanelBidRecordListHeader.add(jLabelBidRecordsListHeaderBidAmount);

        jLabelBidRecordsListHeaderBidTime.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelBidRecordsListHeaderBidTime.setText("Bid Time");
        jLabelBidRecordsListHeaderBidTime.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanelBidRecordListHeader.add(jLabelBidRecordsListHeaderBidTime);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Goverment Auction Records");
        setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        setIconImage(new ImageIcon("C:\\Users\\carlo\\OneDrive\\Documents\\NetBeansProjects\\GovernmentAuctionRecordsApp\\src\\main\\resources\\images\\vb6.png").getImage());
        setResizable(false);

        jLabel3.setText("Title:");

        jTextFieldAuctionTitle.setEditable(false);

        jLabel4.setText("Description:");

        jTextAreaAuctionDescription.setEditable(false);
        jTextAreaAuctionDescription.setColumns(20);
        jTextAreaAuctionDescription.setRows(5);
        jScrollPane1.setViewportView(jTextAreaAuctionDescription);

        jLabel5.setText("Auction Date:");

        jLabel6.setText("Created At:");

        jTextFieldAuctionWinningBidAmount.setEditable(false);

        jLabel7.setText("Winning Bid Amount:");

        jTextFieldAuctionWinningBiderName.setEditable(false);

        jLabel8.setText("Winning Bidder Name:");

        jFormattedTextFieldAuctionDate.setEditable(false);
        jFormattedTextFieldAuctionDate.setFormatterFactory(new DefaultFormatterFactory(new DateFormatter(new SimpleDateFormat("MM/dd/yyyy hh:mm a", Locale.US))));

        jFormattedTextFieldCreatedAt.setEditable(false);
        jFormattedTextFieldCreatedAt.setFormatterFactory(new DefaultFormatterFactory(new DateFormatter(new SimpleDateFormat("MM/dd/yyyy hh:mm a", Locale.US))));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(jLabel3)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextFieldAuctionWinningBiderName)
                    .addComponent(jTextFieldAuctionWinningBidAmount)
                    .addComponent(jTextFieldAuctionTitle)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 327, Short.MAX_VALUE)
                    .addComponent(jFormattedTextFieldAuctionDate)
                    .addComponent(jFormattedTextFieldCreatedAt, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jTextFieldAuctionTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jFormattedTextFieldAuctionDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jFormattedTextFieldCreatedAt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldAuctionWinningBidAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldAuctionWinningBiderName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addContainerGap(67, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Auction Records", jPanel2);

        jScrollPaneBidRecords.setColumnHeaderView(jPanelBidRecordListHeader);

        jList1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPaneBidRecords.setViewportView(jList1);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPaneBidRecords, javax.swing.GroupLayout.DEFAULT_SIZE, 436, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPaneBidRecords, javax.swing.GroupLayout.DEFAULT_SIZE, 322, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Bid Records", jPanel3);

        jEditorPaneHelpContents.setEditable(false);
        jEditorPaneHelpContents.setContentType("text/html"); // NOI18N
        try {
            jEditorPaneHelpContents.setPage(new File("C:\\Users\\carlo\\OneDrive\\Documents\\NetBeansProjects\\GovernmentAuctionRecordsApp\\src\\main\\resources\\html\\HelpContents.html").toURI().toURL());
        } catch (java.io.IOException e1) {
            e1.printStackTrace();
        }
        jEditorPaneHelpContents.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jEditorPaneHelpContentsMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jEditorPaneHelpContentsMouseReleased(evt);
            }
        });
        jScrollPane3.setViewportView(jEditorPaneHelpContents);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 456, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 344, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Help Contents", jPanel4);

        jLabel9.setText("Change the Look And Feel (LAF) of this application's interface.");

        buttonGroupLookAndFeelOptions.add(jRadioButtonMetalLaf);
        jRadioButtonMetalLaf.setText("Metal (Default)");
        jRadioButtonMetalLaf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonMetalLafActionPerformed(evt);
            }
        });

        buttonGroupLookAndFeelOptions.add(jRadioButtonWindowsClassicLaf);
        jRadioButtonWindowsClassicLaf.setSelected(true);
        jRadioButtonWindowsClassicLaf.setText("Windows Classic");
        jRadioButtonWindowsClassicLaf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonWindowsClassicLafActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jRadioButtonWindowsClassicLaf)
                            .addComponent(jRadioButtonMetalLaf))))
                .addContainerGap(147, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel9)
                .addGap(18, 18, 18)
                .addComponent(jRadioButtonMetalLaf)
                .addGap(18, 18, 18)
                .addComponent(jRadioButtonWindowsClassicLaf)
                .addContainerGap(237, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Application Settings", jPanel5);

        jButtonEditRecord.setText("Edit Record");
        jButtonEditRecord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEditRecordActionPerformed(evt);
            }
        });

        jButtonDeleteRecord.setText("Delete Record");
        jButtonDeleteRecord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteRecordActionPerformed(evt);
            }
        });

        jButtonAddRecord.setText("Add Record");
        jButtonAddRecord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddRecordActionPerformed(evt);
            }
        });

        jButtonPreviousRecord.setText("Previous Record");
        jButtonPreviousRecord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPreviousRecordActionPerformed(evt);
            }
        });

        jButtonNextRecord.setText("Next Record");
        jButtonNextRecord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNextRecordActionPerformed(evt);
            }
        });

        jLabel1.setIcon(new javax.swing.ImageIcon("C:\\Users\\carlo\\OneDrive\\Documents\\NetBeansProjects\\GovernmentAuctionRecordsApp\\src\\main\\resources\\images\\arrow-left-icon.png")); // NOI18N

        jLabel2.setIcon(new javax.swing.ImageIcon("C:\\Users\\carlo\\OneDrive\\Documents\\NetBeansProjects\\GovernmentAuctionRecordsApp\\src\\main\\resources\\images\\arrow-right-icon.png")); // NOI18N

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Record Print Options"));

        jCheckBoxIncludebidRecords.setText("Include Bid Records");

        jButtonPrintRecord.setText("Print");
        jButtonPrintRecord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPrintRecordActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonPrintRecord, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBoxIncludebidRecords))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCheckBoxIncludebidRecords)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonPrintRecord, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jButtonExit.setMnemonic('x');
        jButtonExit.setText("Exit");
        jButtonExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonPreviousRecord, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonNextRecord, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jTabbedPane1))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jButtonEditRecord, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonDeleteRecord, javax.swing.GroupLayout.DEFAULT_SIZE, 133, Short.MAX_VALUE)
                        .addComponent(jButtonAddRecord, javax.swing.GroupLayout.DEFAULT_SIZE, 133, Short.MAX_VALUE)
                        .addComponent(jButtonExit, javax.swing.GroupLayout.DEFAULT_SIZE, 133, Short.MAX_VALUE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jTabbedPane1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(jButtonEditRecord, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonDeleteRecord, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonAddRecord, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonExit, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButtonPreviousRecord, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonNextRecord, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExitActionPerformed
        promptQuit(this);
    }//GEN-LAST:event_jButtonExitActionPerformed

    private void jMenuItemCopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemCopyActionPerformed
        jEditorPaneHelpContents.copy();
    }//GEN-LAST:event_jMenuItemCopyActionPerformed

    private void jMenuItemSelectAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSelectAllActionPerformed
        jEditorPaneHelpContents.selectAll();
    }//GEN-LAST:event_jMenuItemSelectAllActionPerformed

    private void jEditorPaneHelpContentsMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jEditorPaneHelpContentsMousePressed
        showPopupMenu(evt);
    }//GEN-LAST:event_jEditorPaneHelpContentsMousePressed

    private void jEditorPaneHelpContentsMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jEditorPaneHelpContentsMouseReleased
        showPopupMenu(evt);
    }//GEN-LAST:event_jEditorPaneHelpContentsMouseReleased

    private void jMenuItemPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemPrintActionPerformed
        // The built-in JEditorPane.print() can be slow with HTML content because 
        // it renders and paginates the styled content before showing the dialog.
        // This is a common issue especially if the HTML/CSS is complex or the 
        // document is long. Also, Swing’s JEditorPane.print() does not provide 
        // any real progress events or callbacks to monitor the actual print job
        // progress. Swing’s printing API (print() method) is a blocking call 
        // that internally renders pages and sends them to the printer. 
        // There’s no built-in mechanism to get “percent done” updates from 
        // JEditorPane.print(). To solve this, we launch printing in a background 
        // thread to avoid UI freeze and create a modal dialog to show during printing.

        JDialog printingDialog = new JDialog(this, "Printing", true);
        JLabel label = new JLabel("Sending print job, please wait...");
        label.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
        printingDialog.add(label);
        printingDialog.pack();
        printingDialog.setLocationRelativeTo(this);

        // Run printing on a background thread
        new Thread(() -> {
            try {
                boolean done = jEditorPaneHelpContents.print();

                // Close dialog and show result on EDT
                SwingUtilities.invokeLater(() -> {
                    printingDialog.dispose();

                    if (done) {
                        JOptionPane.showMessageDialog(this,
                                "Printing completed successfully.",
                                "Information",
                                JOptionPane.INFORMATION_MESSAGE);
                    } else {
                        JOptionPane.showMessageDialog(this,
                                "Print cancelled.",
                                "Warning",
                                JOptionPane.WARNING_MESSAGE);
                    }
                });
            } catch (PrinterException ex) {
                SwingUtilities.invokeLater(() -> {
                    printingDialog.dispose();
                    JOptionPane.showMessageDialog(this,
                            "Printing failed: " + ex.getMessage(),
                            "Error",
                            JOptionPane.ERROR_MESSAGE);
                });
            }
        }).start();

        // Show the dialog (blocks UI until disposed)
        printingDialog.setVisible(true);

    }//GEN-LAST:event_jMenuItemPrintActionPerformed

    private void jRadioButtonMetalLafActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonMetalLafActionPerformed
        try {
            // Switch to Metal Look and Feel
            UIManager.setLookAndFeel("javax.swing.plaf.metal.MetalLookAndFeel");

            // Update all UI components in the frame
            SwingUtilities.updateComponentTreeUI(this);
        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Failed to change Look and Feel: " + ex.getMessage());
        }
    }//GEN-LAST:event_jRadioButtonMetalLafActionPerformed

    private void jRadioButtonWindowsClassicLafActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonWindowsClassicLafActionPerformed
        try {
            // Switch to Windows Classic Look and Feel
            UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsClassicLookAndFeel");

            // Update all UI components in the frame
            SwingUtilities.updateComponentTreeUI(this);
        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Failed to change Look and Feel: " + ex.getMessage());
        }
    }//GEN-LAST:event_jRadioButtonWindowsClassicLafActionPerformed

    private void jButtonPreviousRecordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPreviousRecordActionPerformed
        loadRecord(currentRecordCreatedAtTimestamp, jButtonPreviousRecord);
    }//GEN-LAST:event_jButtonPreviousRecordActionPerformed

    private void jButtonNextRecordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNextRecordActionPerformed
        loadRecord(currentRecordCreatedAtTimestamp, jButtonNextRecord);
    }//GEN-LAST:event_jButtonNextRecordActionPerformed

    private void jButtonAddRecordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddRecordActionPerformed
        String commandButtons[] = {"Submit", "Cancel"};
        AddEditAuctionRecordForm form = new AddEditAuctionRecordForm();
        int promptResult
                = JOptionPane.showOptionDialog(
                        this,
                        form,
                        "Add New Auction Record",
                        JOptionPane.DEFAULT_OPTION,
                        JOptionPane.INFORMATION_MESSAGE,
                        null,
                        commandButtons,
                        null);
        if (promptResult == JOptionPane.YES_OPTION) {
            try {
                Auction auction = form.getAuctionData();
                System.out.println("Auction ID: " + auction.getId());
                System.out.println("Auction Title: " + auction.getTitle());
                System.out.println("Auction Description: " + auction.getDescription());
                System.out.println("Auction Date: " + auction.getAuctionDate());
                System.out.println("Created At: " + auction.getCreatedAt());
                System.out.println("Winning Bid Amount: " + auction.getWinningBidAmount());
                System.out.println("Winning Bidder Name: " + auction.getWinningBidderName());
                // Save to DB or process as needed
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this,
                        "Invalid input: " + ex.getMessage(),
                        "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_jButtonAddRecordActionPerformed

    private void jButtonEditRecordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEditRecordActionPerformed
        String commandButtons[] = {"Submit", "Cancel"};
        AddEditAuctionRecordForm form = new AddEditAuctionRecordForm();
        Auction toEdit = new Auction();
        toEdit.setTitle(jTextFieldAuctionTitle.getText());
        toEdit.setDescription(jTextAreaAuctionDescription.getText());

        SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/yyyy hh:mm a");

        try {
            String auctionDateText = jFormattedTextFieldAuctionDate.getText().trim();
            if (!auctionDateText.isEmpty()) {
                toEdit.setAuctionDate(new Timestamp(sdf.parse(auctionDateText).getTime()));
            } else {
                toEdit.setAuctionDate(null);
            }
        } catch (Exception e) {
            toEdit.setAuctionDate(null); // or handle error as needed
        }

        try {
            String createdAtText = jFormattedTextFieldCreatedAt.getText().trim();
            if (!createdAtText.isEmpty()) {
                toEdit.setCreatedAt(new Timestamp(sdf.parse(createdAtText).getTime()));
            } else {
                toEdit.setCreatedAt(null);
            }
        } catch (Exception e) {
            toEdit.setCreatedAt(null);
        }

        String bidText = jTextFieldAuctionWinningBidAmount.getText().trim();
        if (!bidText.isEmpty()) {
            try {
                toEdit.setWinningBidAmount(new BigDecimal(bidText));
            } catch (NumberFormatException e) {
                toEdit.setWinningBidAmount(null);
            }
        } else {
            toEdit.setWinningBidAmount(null);
        }

        toEdit.setWinningBidderName(jTextFieldAuctionWinningBiderName.getText());
        form.setAuctionData(toEdit);

        int promptResult
                = JOptionPane.showOptionDialog(
                        this,
                        form,
                        "Edit Auction Record",
                        JOptionPane.DEFAULT_OPTION,
                        JOptionPane.INFORMATION_MESSAGE,
                        null,
                        commandButtons,
                        null);
        if (promptResult == JOptionPane.YES_OPTION) {
            try {
                Auction auction = form.getAuctionData();
                System.out.println("Auction ID: " + auction.getId());
                System.out.println("Auction Title: " + auction.getTitle());
                System.out.println("Auction Description: " + auction.getDescription());
                System.out.println("Auction Date: " + auction.getAuctionDate());
                System.out.println("Created At: " + auction.getCreatedAt());
                System.out.println("Winning Bid Amount: " + auction.getWinningBidAmount());
                System.out.println("Winning Bidder Name: " + auction.getWinningBidderName());
                // Save to DB or process as needed
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this,
                        "Invalid input: " + ex.getMessage(),
                        "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_jButtonEditRecordActionPerformed

    private void jButtonDeleteRecordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteRecordActionPerformed
        Toolkit.getDefaultToolkit().beep();
        String objButtons[] = {"Delete Record", "Cancel"};
        int promptResult
                = JOptionPane.showOptionDialog(
                        this,
                        "Are you sure you wish to delete this record?",
                        "Delete Confirmation",
                        JOptionPane.DEFAULT_OPTION,
                        JOptionPane.QUESTION_MESSAGE,
                        null,
                        objButtons,
                        objButtons[1]);
        if (promptResult == JOptionPane.YES_OPTION) {
            JOptionPane.showMessageDialog(this, "Delete Record ID " + currentRecordId);
        }
    }//GEN-LAST:event_jButtonDeleteRecordActionPerformed

    private void jButtonPrintRecordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPrintRecordActionPerformed
        Auction auctionToPrint = new Auction();
        auctionToPrint.setTitle(jTextFieldAuctionTitle.getText());
        auctionToPrint.setDescription(jTextAreaAuctionDescription.getText());

        SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/yyyy hh:mm a");

        try {
            String auctionDateText = jFormattedTextFieldAuctionDate.getText().trim();
            if (!auctionDateText.isEmpty()) {
                auctionToPrint.setAuctionDate(new Timestamp(sdf.parse(auctionDateText).getTime()));
            } else {
                auctionToPrint.setAuctionDate(null);
            }
        } catch (Exception e) {
            auctionToPrint.setAuctionDate(null); // or handle error as needed
        }

        try {
            String createdAtText = jFormattedTextFieldCreatedAt.getText().trim();
            if (!createdAtText.isEmpty()) {
                auctionToPrint.setCreatedAt(new Timestamp(sdf.parse(createdAtText).getTime()));
            } else {
                auctionToPrint.setCreatedAt(null);
            }
        } catch (Exception e) {
            auctionToPrint.setCreatedAt(null);
        }

        String bidText = jTextFieldAuctionWinningBidAmount.getText().trim();
        if (!bidText.isEmpty()) {
            try {
                auctionToPrint.setWinningBidAmount(new BigDecimal(bidText));
            } catch (NumberFormatException e) {
                auctionToPrint.setWinningBidAmount(null);
            }
        } else {
            auctionToPrint.setWinningBidAmount(null);
        }

        auctionToPrint.setWinningBidderName(jTextFieldAuctionWinningBiderName.getText());

        // Use our custom Printable and call PrinterJob.print(),
        // where Java uses the lower-level AWT printing API, which shows the 
        // native OS print dialog. This dialog is more generic and lower-level,
        // less polished than the Swing print() dialog on text components.
//        PrinterJob job = PrinterJob.getPrinterJob();
//        job.setPrintable(new AuctionRecordPrinter(auctionToPrint));
//
//        boolean doPrint = job.printDialog();
//        if (doPrint) {
//            try {
//                job.print();
//            } catch (PrinterException e) {
//                e.printStackTrace();
//                // handle error
//            }
//        }

        // Use Swing, where it uses its own built-in printing implementation 
        // specifically tailored for text components. This method handles 
        // pagination, font styles, and the print dialog with features optimized 
        // for printing text, including headers, footers, and selections.
        JTextArea printArea = new JTextArea();
        printArea.setText(
                "Title: " + auctionToPrint.getTitle() + "\n"
                + "Description: " + auctionToPrint.getDescription() + "\n"
                + "Auction Date: " + auctionToPrint.getAuctionDate() + "\n"
                + "Created At: " + auctionToPrint.getCreatedAt() + "\n"
                + "Winning Bid Amount: " + auctionToPrint.getWinningBidAmount() + "\n"
                + "Winning Bidder Name: " + auctionToPrint.getWinningBidderName()
        );

        try {
            boolean done = printArea.print();  // This shows the nicer Swing print dialog
            if (done) {
                System.out.println("Printing completed");
            } else {
                System.out.println("Printing canceled");
            }
        } catch (PrinterException ex) {
            ex.printStackTrace();
        }


    }//GEN-LAST:event_jButtonPrintRecordActionPerformed

    private void loadRecord(Timestamp timestamp, Object sourceComponent) {
        try {
            Auction record = null;

            if (timestamp == null && sourceComponent == null) {
                // initial load - get latest
                record = AuctionDAO.getLatestAuction();
                if (record == null) {
                    JOptionPane.showMessageDialog(this, "No auctions found.", "Info", JOptionPane.INFORMATION_MESSAGE);
                    jButtonPreviousRecord.setEnabled(false);
                    jButtonNextRecord.setEnabled(false);
                    return;
                }
            } else if (sourceComponent == jButtonPreviousRecord) {
                record = AuctionDAO.getPreviousAuction(currentRecordCreatedAtTimestamp);
                if (record == null) {
                    JOptionPane.showMessageDialog(this, "You have reached the oldest record.", "Info", JOptionPane.INFORMATION_MESSAGE);
                    jButtonPreviousRecord.setEnabled(false);
                    return;
                }
            } else if (sourceComponent == jButtonNextRecord) {
                record = AuctionDAO.getNextAuction(currentRecordCreatedAtTimestamp);
                if (record == null) {
                    JOptionPane.showMessageDialog(this, "You have reached the newest record.", "Info", JOptionPane.INFORMATION_MESSAGE);
                    jButtonNextRecord.setEnabled(false);
                    return;
                }
            }

            if (record != null) {
                populateForm(record);
                updateNavigationButtons(record.getCreatedAt());
            }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Database error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void populateForm(Auction record) {
        jTextFieldAuctionTitle.setText(record.getTitle());
        jTextAreaAuctionDescription.setText(record.getDescription());
        jTextAreaAuctionDescription.setCaretPosition(0); // go back to the start

        Timestamp auctionDateTime = record.getAuctionDate();
        if (auctionDateTime != null) {
            jFormattedTextFieldAuctionDate.setValue(new Date(auctionDateTime.getTime()));
        } else {
            jFormattedTextFieldAuctionDate.setValue(null);
        }

        Timestamp createdAt = record.getCreatedAt();
        if (createdAt != null) {
            jFormattedTextFieldCreatedAt.setValue(new Date(createdAt.getTime()));
        } else {
            jFormattedTextFieldCreatedAt.setValue(null);
        }

        BigDecimal amount = record.getWinningBidAmount();
        jTextFieldAuctionWinningBidAmount.setText(amount != null ? NumberFormat.getCurrencyInstance(Locale.US).format(amount) : "");

        jTextFieldAuctionWinningBiderName.setText(record.getWinningBidderName() != null ? record.getWinningBidderName() : "");

        // **CRUCIAL:** Update current timestamp AFTER loading record
        currentRecordCreatedAtTimestamp = record.getCreatedAt();
        currentRecordId = record.getId();

        System.out.println("Updated currentRecordCreatedAtTimestamp to: " + currentRecordCreatedAtTimestamp);
    }

    private void updateNavigationButtons(Timestamp currentCreatedAt) {
        try {
            boolean hasPrevious = AuctionDAO.getPreviousAuction(currentCreatedAt) != null;
            boolean hasNext = AuctionDAO.getNextAuction(currentCreatedAt) != null;
            jButtonPreviousRecord.setEnabled(hasPrevious);
            jButtonNextRecord.setEnabled(hasNext);
        } catch (SQLException e) {
            e.printStackTrace();
            jButtonPreviousRecord.setEnabled(false);
            jButtonNextRecord.setEnabled(false);
        }
    }

    private void showPopupMenu(MouseEvent e) {
        if (e.isPopupTrigger()) { // works for Win/Mac/Linux
            jPopupMenuForEditorPane.show(e.getComponent(), e.getX(), e.getY());
        }
    }

    private void promptQuit(JFrame uiInstance) {
        Toolkit.getDefaultToolkit().beep();
        String objButtons[] = {"Yes", "No"};
        int promptResult
                = JOptionPane.showOptionDialog(
                        uiInstance,
                        "Are you sure you want to exit?",
                        "Quit Confirmation",
                        JOptionPane.DEFAULT_OPTION,
                        JOptionPane.QUESTION_MESSAGE,
                        null,
                        objButtons,
                        objButtons[1]);
        if (promptResult == JOptionPane.YES_OPTION) {
            uiInstance.setVisible(false);
            uiInstance.dispose();
            System.exit(0);
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroupLookAndFeelOptions;
    private javax.swing.JButton jButtonAddRecord;
    private javax.swing.JButton jButtonDeleteRecord;
    private javax.swing.JButton jButtonEditRecord;
    private javax.swing.JButton jButtonExit;
    private javax.swing.JButton jButtonNextRecord;
    private javax.swing.JButton jButtonPreviousRecord;
    private javax.swing.JButton jButtonPrintRecord;
    private javax.swing.JCheckBox jCheckBoxIncludebidRecords;
    private javax.swing.JEditorPane jEditorPaneHelpContents;
    private javax.swing.JFormattedTextField jFormattedTextFieldAuctionDate;
    private javax.swing.JFormattedTextField jFormattedTextFieldCreatedAt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabelBidRecordsListHeaderBidAmount;
    private javax.swing.JLabel jLabelBidRecordsListHeaderBidTime;
    private javax.swing.JLabel jLabelBidRecordsListHeaderBidderName;
    private javax.swing.JList<String> jList1;
    private javax.swing.JMenuItem jMenuItemCopy;
    private javax.swing.JMenuItem jMenuItemPrint;
    private javax.swing.JMenuItem jMenuItemSelectAll;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanelBidRecordListHeader;
    private javax.swing.JPopupMenu jPopupMenuForEditorPane;
    private javax.swing.JRadioButton jRadioButtonMetalLaf;
    private javax.swing.JRadioButton jRadioButtonWindowsClassicLaf;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPaneBidRecords;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextArea jTextAreaAuctionDescription;
    private javax.swing.JTextField jTextFieldAuctionTitle;
    private javax.swing.JTextField jTextFieldAuctionWinningBidAmount;
    private javax.swing.JTextField jTextFieldAuctionWinningBiderName;
    // End of variables declaration//GEN-END:variables
}
